package ReturnMessage

import "encoding/json"

type ApifoxModal struct {
	AccessToken string `json:"access_token"` // 获取到的凭证，最长为512字节
	Errcode     int64  `json:"errcode"`      // 出错返回码，为0表示成功，非0表示调用失败
	Errmsg      string `json:"errmsg"`       // 返回码提示语
	ExpiresIn   int64  `json:"expires_in"`   // 凭证的有效时间（秒）
}

func NewApifoxModal(accessToken string, errcode int64, errmsg string, expiresIn int64) *ApifoxModal {
	return &ApifoxModal{AccessToken: accessToken, Errcode: errcode, Errmsg: errmsg, ExpiresIn: expiresIn}
}

func (a ApifoxModal) Marshal(data []byte) ([]byte, error) {
	err := json.Unmarshal(data, &a)
	if err != nil {
		return nil, err
	}
	marshal, err := json.Marshal(a)
	return marshal, err
}

type SendMessage struct {
	Touser                 string   `json:"touser"`
	Toparty                string   `json:"toparty"`
	Totag                  string   `json:"totag"`
	Msgtype                string   `json:"msgtype"`
	Agentid                int      `json:"agentid"`
	News                   Articles `json:"news"`
	EnableIDTrans          int      `json:"enable_id_trans"`
	EnableDuplicateCheck   int      `json:"enable_duplicate_check"`
	DuplicateCheckInterval int      `json:"duplicate_check_interval"`
}

func NewSendMessage(touser string, toparty string, totag string, msgtype string, agentid int, news Articles, enableIDTrans int, enableDuplicateCheck int, duplicateCheckInterval int) *SendMessage {
	return &SendMessage{Touser: touser, Toparty: toparty, Totag: totag, Msgtype: msgtype, Agentid: agentid, News: news, EnableIDTrans: enableIDTrans, EnableDuplicateCheck: enableDuplicateCheck, DuplicateCheckInterval: duplicateCheckInterval}
}

type Articles struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	URL         string `json:"url"`
	Picurl      string `json:"picurl"`
	Appid       string `json:"appid"`
	Pagepath    string `json:"pagepath"`
}

func NewArticles(title string, description string, URL string, picurl string, appid string, pagepath string) *Articles {
	return &Articles{Title: title, Description: description, URL: URL, Picurl: picurl, Appid: appid, Pagepath: pagepath}
}

type AutoGenerated struct {
	Errcode        int    `json:"errcode"`
	Errmsg         string `json:"errmsg"`
	Invaliduser    string `json:"invaliduser"`
	Invalidparty   string `json:"invalidparty"`
	Invalidtag     string `json:"invalidtag"`
	Unlicenseduser string `json:"unlicenseduser"`
	Msgid          string `json:"msgid"`
	ResponseCode   string `json:"response_code"`
}

func (a AutoGenerated) Marshl(data []byte) ([]byte, error) {
	err := json.Unmarshal(data, &a)
	if err != nil {
		return nil, err
	}
	marshal, err := json.Marshal(a)
	return marshal, err
}
